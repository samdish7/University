//Sam Disharoon
//Lab 3
//main.cpp
#include <iostream>
#include <algorithm>
struct Heap {
	int length,heap_size;
	int *arr;
	int& operator[](int i){return arr[i-1];}
};
int parent(int i){return i/2;}
int left(int i){return 2*i;}
int right(int i){return (2*i)+1;}
void MaxHeapify(Heap A, int i){
	int l=left(i);
	int r=right(i);
	int largest=0;
	if(l<=A.heap_size && A[l]>A[i]){
	largest=l;
	}
	else {largest=i;}
	if(r<=A.heap_size && A[r]>A[largest]){
	largest=r;
	}
	if(i!=largest){std::swap(A[i],A[largest]);}
	MaxHeapify(A,largest);
}
void BuildMaxHeap(Heap A){
	A.heap_size=A.length;
	for(int i=A.length/2;i>0;i--){MaxHeapify(A,i);}
}
void HeapSort(Heap A){
	BuildMaxHeap(A);
	for(int i=A.length;i>1;i--){
	std::swap(A[1],A[i]);
	A.heap_size=A.heap_size-1;
	MaxHeapify(A,1);
	}
}
void print(){
}
int main(){
	Heap A;
	A.arr[]={32,1,34,0,43,4};
	A.heap_size=6;
	BuildMaxHeap(A);

	return 0;
}
